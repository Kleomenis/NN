function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 22-Nov-2018 17:02:18.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx5 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx5 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;1;1;0;0];
x1_step1.gain = [1;2;2;2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.3396291804277247195;-1.2287623001956804458;1.6469823894419679533;0.63704416083861570286;0.27283082221398741174;-0.69341534873724119947;-3.168768841545239745;1.7327990463478144534;0.95586992466599007834;1.610124739666695115];
IW1_1 = [-6.5389715217529806518e-07 -2.1233248404102216256 1.3888840562102606757 0.0088565435121952737485 -1.0835194464770787626;-1.9780312749927405082e-06 1.2279792820248780494 -1.0762285864320231266 -0.085047529624737563947 -2.1810434184754035059;5.7469737806528815182e-06 3.4413853012323749603 1.3012581538768763778 -0.0050886145839422998807 0.27117675108264993611;2.0290291892418893437e-07 -0.63751230919775536687 -0.47703330460356546672 -2.9400248546542315786 0.32612596955334277604;1.0968048365189453171e-05 1.0142013526045132732 0.50617548398935785503 -5.2009211724019416322e-05 0.0010821089299902885827;-2.2316829652164456022 -0.69339842439922549922 -0.69342517498614553162 -3.203488186564504807e-05 -1.1229923655654646975e-05;-3.7469401130470436634 1.9121147413472499247e-06 4.0493997749758005477e-06 6.0903224971403649291e-07 -3.9152744895268280408e-07;3.3264565048897615443e-06 4.9325339203947491384 1.3714331664057937132 -0.45770956770599996455 1.1420707651590582543;3.4096402660038028498e-06 -0.95593906757141766661 -0.3915662529614807319 1.1268045934548269749 0.81187100195257866364;8.2646591348917266732e-06 -1.6051475942805444319 -1.9846621490056970405 -1.1204113790984697729 2.1548066502273357514];

% Layer 2
b2 = [-0.1304113991323691546;1.9050982276379537783;1.561671548544457222;0.047680264286666947104;-1.4279492375894273781];
LW2_1 = [0.17368347379073220682 -0.00018483060325595102903 0.50532516139890060192 6.4809238086554642011e-07 -0.67455899422921916653 -0.25848644136216331058 -0.99078352560810123428 -0.0077502937669813995111 -5.3636748855030109474e-05 -3.5921709145718015363e-05;2.1097455546156012041 1.0644716081087939319 1.5546466821345006348 0.75293996896681159026 0.3435625286415063262 -1.8595822411396778495 2.329888458613041724 -0.85185049734492157558 1.7153602804035650298 0.69574858302726472203;1.7709982310516987347 1.0698853450822018996 2.7724999326044281744 0.75596338057393985821 0.36645386534724289085 -1.859613801702294289 2.3299350705080077439 -2.082755555860220209 1.7229085744263639146 0.69961961796247018608;0.045888607990046632878 -0.00068675527341645543119 -0.11565322794377123905 -1.0148711837949602188 -0.019450280973367657655 6.4979338890890465401e-06 -8.3382212220799295906e-06 0.12934157150287428628 -0.00078924067290018378763 0.010406716913968102473;-1.2050467967834899152 -1.0413776976029496257 0.71504812679055596014 0.10326852101058926758 -0.43246406624733096935 -1.9798121545049975721e-06 1.6657552331699149423e-06 -0.14587746266595824629 0.15517719218592040953 0.019977565673234647797];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;7.19476221310886;7.19476221310886;1;1];
y1_step1.xoffset = [-1;0.72202;0.72202;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
